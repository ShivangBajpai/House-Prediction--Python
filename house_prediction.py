# -*- coding: utf-8 -*-
"""House Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1s7udCQKXEOXRzbfySRQprub3tHT-zWm7
"""

#TASK 1:-
#import necessary libraries
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

df=pd.read_excel('/content/HousePrediction.xlsx')

df

df.head(100)

df.columns
df.dtypes

#TASK 2:-
df.isnull().sum()

# Identify features with null values
null_features = df.columns[df.isnull().any()].tolist()

print("Features with null values:", null_features)

#salePrice Mean
a=df['SalePrice'].mean()
a

# count of Numerical features
df.count(numeric_only=True)

#First five rows of numerical values

df.select_dtypes(include=[np.number]).head()

#Show SalePrice comparison with different Years
plt.figure(figsize=(30,10))
sns.barplot(data=df,x='YearBuilt',y='SalePrice',hue="LotConfig")
plt.show()

# On the Discrete Variable relationship between Discrete and Sales price
x='YearBuilt'
y='SalePrice'
plt.plot(x,y,'bs-',linewidth=4,markersize=10)
plt.show()

# On the Continous Variable the relationship between Discrete and Sales Price
y = ['YearBuilt', 'SalePrice']
x= ['TotalBsmtSF', 'BsmtFinSF2']
plt.bar(x, height=y, color='b')
plt.show()

# Analysing the Continous values by creating the histogram to understand the distribution
sns.histplot(data=df,x="SalePrice")
plt.title('Distribution analysis')
plt.show()

#Lograthmic Transformation

# Select numeric columns
numeric_columns = df.select_dtypes(include=["int", "float"]).columns

# Apply log transformation to each numeric column
for col in numeric_columns:
    df[col] = np.log(df[col])

# Show the transformed DataFrame
df.head()

#TASK 3:-

#Finding the Outliers

from scipy import stats

# Select numeric columns
numeric_columns = df.select_dtypes(include=["int", "float"]).columns

# Apply zscore to numeric columns
z = df[numeric_columns].apply(lambda x: np.abs(stats.zscore(x)))

# Print the z-scores
print(z)

#Relationship between Categorical feature and SalePrice
# Convert categorical variables to numerical values
x = df['LotConfig'].astype('category').cat.codes
y = df['SalePrice'].astype('category').cat.codes

# Plot the data
plt.plot(x, y)
plt.xlabel("LotConfig")
plt.ylabel("SalePrice")
plt.title("Categorical Relationship")
plt.show()

# The Correlation between Numerical Features and Sales Price
# Convert x to a series
x = pd.Series(["SalePrice"] * len(df))

# Plot the data
plt.plot(x, y)
plt.title("Correlation")
plt.show()

#Find Continous Features vs SalePrice


y=df["BsmtFinSF2"]
x = df['SalePrice']
plt.bar(x,height= y)
plt.xlabel("SalePrice")
plt.ylabel("BsmtFinSF2")
plt.title("Correlation")
plt.show()

#Feature Engineering
#Filling Missing Value
df.fillna(method='bfill',inplace=True)

df

#Temporal Variable

from datetime import datetime

dt1 = datetime(2003, 1, 1)
dt2 = datetime(1976, 1, 15)

td = dt2 - dt1
print(td)  # 14 days, 0:00:00











